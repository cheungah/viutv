// Generated by CoffeeScript 1.10.0
// this GA id is not using - 2019/01/07
(function() {
  var AMAAnalyticsAdapter, AppCache, AppUtils, CookiesCache, Event, EventSubmitProtocol, FlurryAnalyticsAdapter, GlobalCustomVariables, GoogleAnalyticsAdapter, IOUtils, JSUtils, MemoryCache, PageView, SocialInteraction, StandardCustomVariables, SystemEventFacade, TabCache, TimingEvent, Tracker, TrackerCollection, TrackerState, TrackingObject, TrackingUtils, TransferUtils, ValidateUtils, VariableDecorator, VariablesTransfer, _activitySessionStart, _appSessionStart, _basicConfigure, _cache, _createLogger, _defaultOpts, _flurryConfigure, _forceExtactDimensionWithPrefix, _gaCallback, _gaConfigure, _getStorage, _pageClick, _pageSessionStart, _postAMAEvent, _resolveClientIPAdress, _screenSessionStart, _storageAvailable, _testStorageAvailable, _trackerInit, _trackerInitFailure, beforeSubmitConfigure, dimensionChange, echoDimensionChagne, getTracker, globalDimension, globalScreen, globalVariable, module, myInfoProtocol, scope, trackerState, trackingConfig, trackingIDLookup,
    hasProp = {}.hasOwnProperty,
    slice = [].slice,
    indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; },
    extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  // var Auth = window['AWSAuth'];
  // var Analytics = window['AWSAnalytics'];

  scope = {};

  window.tracking = {};

  module = {
    "exports": window.tracking
  };

  trackingConfig = {
    "TAG_VERSION": "2018.02",
    "IP_RESOLVE_SERVICE": "https://49jpbyt3h3.execute-api.us-east-1.amazonaws.com/Production/request-info",
    "TRACKING_INFO_SERVICE": "https://49jpbyt3h3.execute-api.us-east-1.amazonaws.com/Production/tracking/",
    "POST_AMA_EVENT_SERVICE": function(trackingID) {
      return "https://49jpbyt3h3.execute-api.us-east-1.amazonaws.com/Production/tracking/" + trackingID + "/ama-event";
    },
    "PUBLIC_INFO_API_KEY": "e0y6ithGMTm3i8NwcrAC9qE0dp9S2273fThvZpJ4",
    "POST_API_KEY": "MessAXkstKFtLykaNVID70dfxHsCyXSbkli6xKd0",
    "logLevel": "info",
    "TRACKING_MAP": {
      "65e9ddf8-08c1-496a-968d-38d3298d709d": {
        "STATE": "PRD",
        "AMA_APP_ID": "d88024c6d4b54299bdeec5430bfa0552",
        "COGNITO_IDENTITY_POOL_ID": "us-east-1:964933a2-5453-453e-9720-1a5457b85026",
        "GA_PROPERTY_ID": "UA-63554433-4",
        "FLURRY_APP_KEY": "CDGCMPDPNZNF9YDJZ3F7"
      },
      "ee0900de-3c02-47f5-9a7b-ed5d37f38b56": {
        "STATE": "UAT",
        "AMA_APP_ID": "b983c70031474bc09b1fdedab4acc4dd",
        "COGNITO_IDENTITY_POOL_ID": "us-east-1:ef81b725-cc74-46d8-9f2d-1b202117f7a5",
        "GA_PROPERTY_ID": "UA-63554433-2",
        "FLURRY_APP_KEY": "ZKHMVBF3MJMVVFGYKJSH"
      }
    }
  };

  trackingConfig.setLogLevel = function(logLevel) {
    trackingConfig.logLevel = logLevel;
    return _createLogger(logLevel);
  };

  module.exports.trackingConfig = trackingConfig;

  _createLogger = function(_level) {
    return scope.log = bunyan.createLogger({
      name: "Tracking",
      streams: [
        {
          level: _level,
          stream: new bunyan.ConsoleRawStream(),
          type: 'raw'
        }
      ]
    });
  };

  _createLogger(trackingConfig.logLevel);

  globalDimension = {

    /*Advertising ID(Android) or IDFA(IOS) */
    DEVICE_ID: "15",

    /*Device name . For IOS reference
    http://stackoverflow.com/questions/11197509/ios-how-to-get-device-make-and-model
    
    For Android,
    Format will become "{manufacturer} {model}" , for instance , LG Nexus 5
     */
    DEVICE_MODEL: "16",

    /*Device network status, Possible value:
    1. Wifi
    2. Mobile network
    3. Offline
     */
    DEVICE_NETWORK_MODE: "17",

    /*Gateway IP */
    DEVICE_IP: "23",

    /*Device OS */
    DEVICE_OS: "40",

    /*Device OS version */
    DEVICE_OS_VERSION: "41",

    /*Tracking SDK version */
    TAGGING_VERSION: "42",

    /*Timing event start time */
    EVENT_TIMESTAMP: "43",

    /*Install referrer of app */
    INSTALL_REFERRER: "44",

    /*Deprecated */
    LEAD_IN_REFERRER: "47",

    /*Session ID on app create */
    APP_SESSION_ID: "48",

    /*Session ID on activity resume from background */
    ACTIVITY_SESSION_ID: "49",

    /*Session ID on screen init */
    SCREEN_SESSION_ID: "50",

    /*User agent of browser */
    USER_AGENT: "51",

    /*Page title of browser */
    PAGE_TITLE: "52",

    /*Page path of browser */
    PAGE_FULL_PATH: "53",

    /*Window width of browser */
    WINDOW_WIDTH: "54",

    /*Window height of browser */
    WINDOW_HEIGHT: "55",

    /*Inch of device screen */
    SCREEN_INCH: "56",

    /*Device Type, Tablet, Mobile , Tv Boxâ€¦etc. */
    DEVICE_TYPE: "57",

    /*User Id */
    USER_ID: "58",

    /*Current screen name */
    SCREEN_NAME: "64",

    /*Device lanuage(OS lanuage) */
    SYSTEM_LANUAGE: "68",

    /*App lanuage */
    APP_LANUAGE: "69",

    /*Installation ID */
    INSTALLATION_ID: "70",

    /*Address of previous URL (HTTP standard header) */
    HTTP_REFERRER: "71",

    /*Web only, unique session for each page */
    PAGE_SESSION: "78",

    /*Leadin app id */
    LEAD_IN_REFERRER_ID: "81",

    /*Subscription source, Possible value:
    1. csl
    3. 1010
    2. Singtel
    3. IAP
    4. CSL/1010
     */
    USER_SUBSCRIPTION_SOURCE: "82",

    /*Subscription plan code */
    USER_SUBSCRIPTION_PLAN_CODE: "83",

    /*utm_source in query string */
    UTM_SOURCE: "92",

    /*utm_campaign in query string */
    UTM_CAMPAIGN: "93",

    /*utm_medium in query string */
    UTM_MEDIUM: "103",

    /*utm_term in query string */
    UTM_TERM: "104",

    /*utm_content in query string */
    UTM_CONTENT: "105",

    AREA_ID: "106",

    USER_LEVEL: "114",

    /*Marketing Automation Platform device id */
    MARKETING_AUTOMATION_PLATFORM_DEVICE_ID: "109"
  };

  module.exports.globalDimension = globalDimension;

  globalScreen = {
    TEST: "Test",
    BACKGROUND: "Background"
  };

  module.exports.globalScreen = globalScreen;

  AppCache = {
    "name": "App",
    "available": function() {
      return IOUtils.storageAvailable("local");
    },
    "get": function(key) {
      return IOUtils.getStorageItem("local", key);
    },
    "set": function(key, value) {
      return IOUtils.setStorageItem("local", key, value);
    },
    "exist": function(key) {
      return IOUtils.storageKeyExist("local", key);
    },
    "delete": function(key) {
      return IOUtils.removeStorageItem("local", key);
    },
    "each": function(callback) {
      var key, r, results, value;
      r = IOUtils.allItemInStorage("local");
      results = [];
      for (key in r) {
        if (!hasProp.call(r, key)) continue;
        value = r[key];
        results.push(callback(key, value));
      }
      return results;
    }
  };

  _defaultOpts = {
    "path": "/"
  };

  CookiesCache = {
    "name": "Cookies",
    "available": function() {
      var COOKIES_KEY = "Cookies Available"
      this.set(COOKIES_KEY, "true");

      return !!(navigator.cookieEnabled && this.get(COOKIES_KEY))
      
    },
    "get": function(key) {
      return Cookies.get(key);
    },
    "set": function(key, value, options) {
      if (options == null) {
        options = _defaultOpts;
      }
      return Cookies.set(key, value, options);
    },
    "exist": function(key) {
      return Cookies.get(key) != null;
    },
    "delete": function(key, options) {
      if (options == null) {
        options = _defaultOpts;
      }
      return Cookies.remove(key, options);
    },
    "each": function(callback) {
      var key, r, results, value;
      r = Cookies.get();
      results = [];
      for (key in r) {
        if (!hasProp.call(r, key)) continue;
        value = r[key];
        results.push(callback(key, value));
      }
      return results;
    }
  };

  _cache = {};

  MemoryCache = {
    "name": "In memory",
    "available": function() {
      return true;
    },
    "get": function(key) {
      return _cache[key];
    },
    "set": function(key, value) {
      return _cache[key] = value;
    },
    "exist": function(key) {
      return key in _cache;
    },
    "delete": function(key) {
      return delete _cache[key];
    },
    "each": function(callback) {
      var key, results, value;
      results = [];
      for (key in _cache) {
        if (!hasProp.call(_cache, key)) continue;
        value = _cache[key];
        results.push(callback(key, value));
      }
      return results;
    }
  };

  TabCache = {
    "name": "Session",
    "available": function() {
      return IOUtils.storageAvailable("session");
    },
    "get": function(key) {
      return IOUtils.getStorageItem("session", key);
    },
    "set": function(key, value) {
      return IOUtils.setStorageItem("session", key, value);
    },
    "exist": function(key) {
      return IOUtils.storageKeyExist("session", key);
    },
    "delete": function(key) {
      return IOUtils.removeStorageItem("session", key);
    },
    "each": function(callback) {
      var key, r, results, value;
      r = IOUtils.allItemInStorage("session");
      results = [];
      for (key in r) {
        if (!hasProp.call(r, key)) continue;
        value = r[key];
        results.push(callback(key, value));
      }
      return results;
    }
  };

  AppUtils = {
    "getEventCoordinate": function(e) {
      var coordinate;
      return coordinate = {
        x: e.clientX,
        y: e.clientY
      };
    },
    "getSystemLanguage": function() {
      if (navigator.browserLanguage != null) {
        return navigator.browserLanguage;
      } else {
        return navigator.language;
      }
    },
    "getLeadinInfo": function() {
      var isLeadin, r, uriInfo, uriParams;
      uriInfo = new URI(window.location.href).normalize();
      uriParams = uriInfo.search(true);
      isLeadin = false;
      r = {};
      ["utm_source", "utm_campaign", "utm_medium", "utm_term", "utm_content"].forEach(function (utmType) {
        if ((uriParams[utmType] != null) && uriParams[utmType].length > 0) {
          isLeadin = true;
          r[utmType] = uriParams[utmType];
        }
      })
      if (isLeadin) {
        return r;
      } else {
        return null;
      }
    },
    "getDeviceID": function() {
      var cookieDeviceID, device_id;
      cookieDeviceID = '_ottUID';
      device_id = "";
      if (CookiesCache.exist(cookieDeviceID)) {
        device_id = CookiesCache.get(cookieDeviceID);
      } else {
        device_id = uuid.v4();
      }

      // As a mistake, some user's device id prefix with multiple "viu-" and store in Cookie
      // So we need to remove the prefix
      device_id = device_id.replace(/viu\-/g, "");

      CookiesCache.set(cookieDeviceID, device_id, {
        "path": '/',
        "expires": 20 * 365
      });
      
      // var set_parent_domain = "";
      // if (typeof parent_domain !== 'undefined'){
      //   set_parent_domain = parent_domain;
      // }else if (typeof constant_obj !== 'undefined' && typeof constant_obj.parent_domain !== 'undefined'){
      //   set_parent_domain = constant_obj.parent_domain;
      // }

      // if (set_parent_domain != "") {
      //   CookiesCache.set(cookieDeviceID, device_id, {
      //     "path": '/',
      //     "expires": 20 * 365,
      //     "domain": set_parent_domain
      //   });
      // }
      
      return device_id;
    },
    "getPageSession": function() {
      var pageSessionID;
      pageSessionID = uuid.v4();
      if (MemoryCache.exist("pageSessionID")) {
        pageSessionID = MemoryCache.get("pageSessionID");
      }
      MemoryCache.set("pageSessionID", pageSessionID);
      return pageSessionID;
    },
    "getTitle": function() {
      return window.document.title;
    },
    "getPageFullPath": function() {
      return window.location.protocol + '//' + window.location.hostname + window.location.pathname + window.location.search + window.location.hash;
    },
    "getAppSessionMeta": function() {
      var cache, cookieSessionMetaName, error, metaData, r;
      cookieSessionMetaName = '_ottAIDMeta';
      cache = IOUtils.getCache(TabCache, CookiesCache, MemoryCache);
      if (!cache.exist(cookieSessionMetaName)) {
        this.createAppSession();
      }
      metaData = cache.get(cookieSessionMetaName);
      try {
        r = JSON.parse(metaData);
      } catch (error) {
        r = {
          "createdTime": JSUtils.currentTimestamp()
        };
      }
      return r;
    },
    "storeOnboardingData": function(app_session_id) {
      var expiredTime, now;
      now = new Date().getTime();
      expiredTime = new Date(now + 20 * 365 * 24 * 60 * 60 * 1000);

      var onboardingSessionName = "onboarding_session";
      if (!CookiesCache.exist(onboardingSessionName)) {
        CookiesCache.set(onboardingSessionName, app_session_id, {
          path: '/',
          expires: expiredTime
        });
      } 

      var onboardingDateName = "onboarding_date";
      if (!CookiesCache.exist(onboardingDateName)) {
        var today = new Date().toISOString().slice(0, 10);
        CookiesCache.set(onboardingDateName, today, {
          path: '/',
          expires: expiredTime
        });
      } 
    },
	"createAppSessionCookie": function(app_session_id) {
      var expiredTime, now;
      now = new Date().getTime();
      expiredTime = new Date(now + 3 * 60 * 60 * 1000);

      var cookie = CookiesCache.set("_ottAID", app_session_id, {
        path: '/',
        expires: expiredTime
      });

      if (CookiesCache.get("_ottAID")) {
        return cookie;
      } 
    },
    "createAppSession": function() {
      var appSessionID, cache, sessionMeta;
      appSessionID = uuid.v4();
      sessionMeta = {
        "createdTime": JSUtils.currentTimestamp()
      };
      cache = IOUtils.getCache(TabCache, CookiesCache, MemoryCache);
      cache.set("_ottAID", appSessionID);
      cache.set("_ottAIDMeta", JSON.stringify(sessionMeta));
//      SystemEventFacade.appSessionStart(appSessionID);
      return appSessionID;
    },
    "getAppSession": function() {
      var app_session_id, cookieSessionName;
      cookieSessionName = '_ottAID';	  
	  
	  if (CookiesCache.exist(cookieSessionName)) {
        app_session_id = CookiesCache.get(cookieSessionName);
      } else {
        app_session_id = uuid.v4();
      }

      this.storeOnboardingData(app_session_id);
	  
      this.createAppSessionCookie(app_session_id);
      
	  TrackingUtils.addDimension(globalDimension.APP_SESSION_ID, app_session_id);
      
	  return app_session_id;
    },
    "refreshActivitySession": function(activityID) {
      scope.log.debug("Refersh activity session to " + activityID);
      this.createActivitySession(activityID);
      return this.getActivitySession();
    },
    "createActivitySession": function(activityID) {
      var expiredTime, now;
      now = new Date().getTime();
      expiredTime = new Date(now + 30 * 60 * 1000);

      var cookie = CookiesCache.set("_ottActivityID", activityID, {
        path: '/',
        expires: expiredTime
      });

      if ( CookiesCache.get("_ottActivityID") ) {
        return cookie;
      } else {
        return MemoryCache.set("_ottActivityID", activityID);
      }

    },
    "getActivitySession": function() {
      var activityID, cookieSessionName;
      cookieSessionName = '_ottActivityID';
      if (CookiesCache.exist(cookieSessionName)) {
        activityID = CookiesCache.get(cookieSessionName);
      } else if (MemoryCache.exist(cookieSessionName)) {
        activityID = MemoryCache.get(cookieSessionName);
      } else {
        activityID = uuid.v4();
      }
      this.createActivitySession(activityID);
      TrackingUtils.addDimension(globalDimension.ACTIVITY_SESSION_ID, activityID);
      return activityID;
    },
    "getContainerSize": function() {
      var currentSize;
      currentSize = {
        width: window.innerWidth || document.body.clientWidth,
        height: window.innerHeight || document.body.clientHeight
      };
      return currentSize;
    },
    "getScreenSize": function() {
      var currentSize;
      currentSize = {
        width: screen.width,
        height: screen.height
      };
      return currentSize;
    }
  };

  _getStorage = function(scope_) {
    var storageName;
    if (scope_ == null) {
      scope_ = "session";
    }
    storageName = scope_ + "Storage";
    
    // for Safari, 
    // if localstorage is blocked, calling window.localstorage may break down following script
    try {
      if (window[storageName] != null) {
        return window[storageName];
      } else {
        return null;
      }
    } catch(e) {
      return null
    }
    
  };

  _storageAvailable = function(scope_) {
    var r;
    if (trackingConfig[scope_ + "Storage"] != null) {
      r = trackingConfig[scope_ + "Storage"];
      return r;
    } else {
      return false;
    }
  };

  _testStorageAvailable = function() {
    var _scope, e, error, j, len, ref, results, storage, storageAvailable;
    ref = ["local", "session"];
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      _scope = ref[j];
      storageAvailable = false;
      storage = _getStorage(_scope);
      if (storage != null) {
        try {
          storage.setItem(_scope + " Storage Available", "true");
          storageAvailable = true;
        } catch (error) {
          e = error;
          storageAvailable = false;
        }
      } else {
        storageAvailable = false;
      }
      results.push(trackingConfig[_scope + "Storage"] = storageAvailable);
    }
    return results;
  };

  _testStorageAvailable();

  IOUtils = {
    "getCache": function() {
      var choice, choices, j, len;
      choices = 1 <= arguments.length ? slice.call(arguments, 0) : [];
      for (j = 0, len = choices.length; j < len; j++) {
        choice = choices[j];
        if (choice.available()) {
          return choice;
        }
      }
      return null;
    },
    "storageAvailable": function(scope_) {
      var _scope, j, len, r, scopes;
      scopes = [];
      if (scope_ != null) {
        scopes.push(scope_);
      } else {
        scopes.push("local");
        scopes.push("session");
      }
      r = true;
      for (j = 0, len = scopes.length; j < len; j++) {
        _scope = scopes[j];
        r = r && _storageAvailable(_scope);
      }
      return r;
    },
    "setStorageItem": function(scope_, key, value) {
      var newValue, oldValue, storage;
      storage = _getStorage(scope_);
      if (_storageAvailable(scope_)) {
        oldValue = this.getStorageItem(scope_, key);
        newValue = value;
        if (oldValue !== newValue) {
          storage.setItem(key, value);
          return true;
        } else {
          return false;
        }
      }
      return false;
    },
    "getStorageItem": function(scope_, key) {
      var storage;
      storage = _getStorage(scope_);
      if (_storageAvailable(scope_)) {
        return storage.getItem(key);
      } else {
        return null;
      }
    },
    "storageKeyExist": function(scope_, key) {
      var value;
      value = this.getStorageItem(scope_, key);
      if (value != null) {
        return true;
      } else {
        return false;
      }
    },
    "removeStorageItem": function(scope_, key) {
      var storage;
      storage = _getStorage(scope_);
      if (_storageAvailable(scope_)) {
        storage.removeItem(key);
        return true;
      }
      return false;
    },
    "clearStorage": function(scope_) {
      var storage;
      storage = _getStorage(scope_);
      if (_storageAvailable(scope_)) {
        return storage.clear();
      }
    },
    "allItemInStorage": function(scope_) {
      var _scope, index, j, k, key, keyLength, len, r, ref, result, scopes, storage;
      scopes = [];
      if (scope_ != null) {
        scopes.push(scope_);
      } else {
        scopes.push("local");
        scopes.push("session");
      }
      result = {};
      for (j = 0, len = scopes.length; j < len; j++) {
        _scope = scopes[j];
        storage = _getStorage(_scope);
        if (_storageAvailable(_scope)) {
          keyLength = storage.length;
          for (index = k = 0, ref = keyLength; 0 <= ref ? k <= ref : k >= ref; index = 0 <= ref ? ++k : --k) {
            key = storage.key(index);
            if (key != null) {
              r = this.getStorageItem(_scope, key);
              if (r != null) {
                result[key] = r;
              }
            }
          }
        }
      }
      return result;
    }
  };

  JSUtils = {
    "getProperty": function(params, key, defaultValue) {
      var argumentLength;
      if (defaultValue == null) {
        defaultValue = null;
      }
      argumentLength = arguments.length;
      if (argumentLength >= 3) {
        if (params[key] != null) {
          return params[key];
        } else {
          return defaultValue;
        }
      } else {
        if (key in params) {
          return params[key];
        } else {
          throw new Error("Property \"" + key + "\" must set");
        }
      }
    },
    "defaultCallback": function(err, result) {
      var fatalError;
      if (err != null) {
        fatalError = false;
        if ((err.fatal != null) && err.fatal) {
          fatalError = true;
        } else if (err.fatal == null) {
          fatalError = true;
        } else {
          fatalError = false;
        }
        if (fatalError) {
          scope.log.error({
            "err": err
          }, "Fatal error!");
        } else {
          scope.log.debug({
            "err": err
          }, "Got error on submit event");
        }
      }
    },
    "objectClone": function(src, mode) {
      var buff, key, r, value;
      if (mode == null) {
        mode = "Shallow";
      }
      r = {};
      if (mode === "Shallow") {
        for (key in src) {
          if (!hasProp.call(src, key)) continue;
          value = src[key];
          r[key] = value;
        }
      } else if (mode === "Deep") {
        buff = JSON.stringify(r);
        r = JSON.parse(buff);
      }
      return r;
    },
    "objectMerge": function(src1, src2) {
      var key, result, value;
      result = {};
      for (key in src1) {
        if (!hasProp.call(src1, key)) continue;
        value = src1[key];
        result[key] = value;
      }
      for (key in src2) {
        if (!hasProp.call(src2, key)) continue;
        value = src2[key];
        result[key] = value;
      }
      return result;
    },
    "quietExecute": function(func, args, self) {
      var e, error;
      if (self == null) {
        self = {};
      }
      try {
        return func.apply(self, args);
      } catch (error) {
        e = error;
        return null;
      }
    },
    "currentTimestamp": function() {
      return String(Date.now());
    }
  };

  _pageClick = function(e) {
    var clickX, clickY, containerHeight, containerSize, containerWidth, coordinates;
    containerSize = AppUtils.getContainerSize();
    coordinates = AppUtils.getEventCoordinate(e);
    clickX = coordinates.x;
    clickY = coordinates.y;
    containerWidth = containerSize.width;
    containerHeight = containerSize.height;
    return tracking.facade.event_heatmapClick(window.tracking.screen.BACKGROUND, clickX, clickY, containerWidth, containerHeight);
  };

  _pageSessionStart = function(sessionID) {
    var currentScreen, event_, tracker;
    currentScreen = TrackingUtils.getScreenName();
    if (sessionID != null) {
      event_ = new Event();
      event_.category = "System";
      event_.action = "PAGE session start";
      event_.label = sessionID;
      tracker = getTracker(currentScreen, TrackingUtils.getUserID());
      return tracker.pushEvent(event_);
    }
  };

  _appSessionStart = function(sessionID) {
    var currentScreen, event_, tracker;
    currentScreen = TrackingUtils.getScreenName();
    if (sessionID != null) {
      event_ = new Event();
      event_.category = "System";
      event_.action = "APP session start";
      event_.label = sessionID;
      tracker = getTracker(currentScreen, TrackingUtils.getUserID());
      return tracker.pushEvent(event_);
    }
  };

  _activitySessionStart = function(sessionID) {
    var currentScreen, event_, tracker;
    currentScreen = TrackingUtils.getScreenName();
    if (sessionID != null) {
      event_ = new Event();
      event_.category = "System";
      event_.action = "ACTIVITY session start";
      event_.label = sessionID;
      tracker = getTracker(currentScreen, TrackingUtils.getUserID());
      return tracker.pushEvent(event_);
    }
  };

  _screenSessionStart = function(oldSessionID, newSessionID) {
    var currentScreen, startEvent_, stopEvent_, tracker;
    currentScreen = TrackingUtils.getScreenName();
    tracker = getTracker(currentScreen, TrackingUtils.getUserID());
    if ((newSessionID != null) && oldSessionID !== newSessionID) {
      startEvent_ = new Event();
      startEvent_.category = "System";
      startEvent_.action = "SCREEN session start";
      startEvent_.label = newSessionID;
      tracker.pushEvent(startEvent_);
      if (oldSessionID != null) {
        stopEvent_ = new Event();
        stopEvent_.category = "System";
        stopEvent_.action = "SCREEN session stop";
        stopEvent_.label = oldSessionID;
        return tracker.pushEvent(stopEvent_);
      }
    }
  };

  SystemEventFacade = {
    "pageClick": _pageClick,
    "appSessionStart": _appSessionStart,
    "activitySessionStart": _activitySessionStart,
    "screenSessionStart": _screenSessionStart,
    "pageSessionStart": _pageSessionStart
  };

  module.exports.SystemEventFacade = SystemEventFacade;

  _forceExtactDimensionWithPrefix = function(dimension) {
    var g, r;
    g = globalVariable;
    r = g.dimensions[dimension];
    return r;
  };

  TrackingUtils = {
    "getDimensions": function(excludedDimensions) {
      var globalVars, j, key, len, r, ref, val;
      if (excludedDimensions == null) {
        excludedDimensions = [];
      }
      r = {};
      globalVars = this.getGlobal();
      ref = globalVars.dimensionKeySet();
      for (j = 0, len = ref.length; j < len; j++) {
        key = ref[j];
        if (indexOf.call(excludedDimensions, key) < 0) {
          val = this.getDimension(key);
          if (val != null) {
            r[key] = val;
          }
        }
      }
      return r;
    },
    "refreshAppSession": function() {
      var appSessionID;
      appSessionID = AppUtils.createAppSession();
      return this.addDimension(globalDimension.APP_SESSION_ID, appSessionID);
    },
    "refreshScreenSession": function(cleanUpGlobal) {
      var backupObject, globalVars, key, value;
      if (cleanUpGlobal == null) {
        cleanUpGlobal = true;
      }
      globalVars = this.getGlobal();
      backupObject = {};
      if (!cleanUpGlobal) {
        backupObject = this.getDimensions([globalDimension.SCREEN_SESSION_ID]);
      }
      this.addDimension(globalDimension.SCREEN_SESSION_ID, uuid.v4());
      globalVars.notifyListener = false;
      for (key in backupObject) {
        if (!hasProp.call(backupObject, key)) continue;
        value = backupObject[key];
        this.addDimension(key, value);
      }
      return globalVars.notifyListener = true;
    },
    "refreshActivitySessionID": function(notifyListener) {
      var _globalVariable;
      _globalVariable = this.getGlobal();
      if (!notifyListener) {
        _globalVariable.notifyListener = false;
      }
      AppUtils.refreshActivitySession(uuid.v4());
      if (!notifyListener) {
        return _globalVariable.notifyListener = true;
      }
    },
    "clearUpDimensions": function(excludedDimensions) {
      var j, key, keyNeedRemove, len, ref, results, value;
      if (excludedDimensions == null) {
        excludedDimensions = [];
      }
      keyNeedRemove = [];
      ref = this.getGlobal().dimensions;
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        if (this._variableNeedPrefix(key)) {
          if (indexOf.call(excludedDimensions, key) < 0) {
            keyNeedRemove.push(key);
          }
        }
      }
      results = [];
      for (j = 0, len = keyNeedRemove.length; j < len; j++) {
        key = keyNeedRemove[j];
        results.push(this.removeDimension(key));
      }
      return results;
    },
    "getGlobal": function() {
      return globalVariable;
    },
    "addDimension": function(dimension, value) {
      return globalVariable.addDimension(dimension, value);
    },
    "getDimension": function(dimension) {
      return globalVariable.getDimension(dimension);
    },
    "removeDimension": function(dimension) {
      return globalVariable.removeDimension(dimension);
    },
    "getScreenSessionID": function() {
      var currentSessionID;
      currentSessionID = _forceExtactDimensionWithPrefix(globalDimension.SCREEN_SESSION_ID);
      if (currentSessionID == null) {
        scope.log.debug({
          "dimensions": globalVariable.dimensions
        }, "All exist dimension");
        currentSessionID = uuid.v4();
        this.addDimension(globalDimension.SCREEN_SESSION_ID, currentSessionID);
      }
      return currentSessionID;
    },
    "getScreenName": function() {
      var current;
      current = this.getDimension(globalDimension.SCREEN_NAME);
      if (current != null) {
        return current;
      } else {
        return window.screenName || globalScreen.BACKGROUND;
      }
    },
    "getUserID": function() {
      var current;
      current = this.getDimension(globalDimension.USER_ID);
      if (current != null) {
        return current;
      } else {
        return null;
      }
    },
    "dimensionNeedPrefix": function(dimension) {
      var _key, globalDimensions, value;
      globalDimensions = (function() {
        var results;
        results = [];
        for (_key in globalDimension) {
          if (!hasProp.call(globalDimension, _key)) continue;
          value = globalDimension[_key];
          results.push(value);
        }
        return results;
      })();
      if (indexOf.call(globalDimensions, dimension) >= 0) {
        return false;
      } else {
        return true;
      }
    },
    "getDimensionWithoutPrefix": function(dimension) {
      var rawValue, splitedValue, value;
      value = _forceExtactDimensionWithPrefix(dimension);
      if ((value != null) && this.dimensionNeedPrefix(dimension)) {
        splitedValue = value.split("_");
        if (splitedValue.length > 1) {
          rawValue = splitedValue.slice(1).join("_");
          return rawValue;
        }
      } else {
        return value;
      }
    },
    "removeDimensionPrefix": function(dimension) {
      var currentSessionID, rawValue, sessionID, splitedValue, value;
      value = _forceExtactDimensionWithPrefix(dimension);
      if ((value != null) && this.dimensionNeedPrefix(dimension)) {
        splitedValue = value.split("_");
        if (splitedValue.length > 1) {
          sessionID = splitedValue[0];
          rawValue = splitedValue.slice(1).join("_");
          currentSessionID = _forceExtactDimensionWithPrefix(globalDimension.SCREEN_SESSION_ID);
          if (currentSessionID === sessionID) {
            return rawValue;
          } else {
            return null;
          }
        } else {
          return value;
        }
      } else {
        return value;
      }
    },
    "decorateDimensionWithPrefix": function(dimension, value) {
      var currentSessionID;
      if (this.dimensionNeedPrefix(dimension)) {
        currentSessionID = this.getScreenSessionID();
        return currentSessionID + "_" + value;
      } else {
        return value;
      }
    },
    "getDimensionStorage": function(dimension) {
      if (IOUtils.storageAvailable()) {
        if (this.dimensionNeedPrefix(dimension)) {
          return TabCache;
        } else {
          return AppCache;
        }
      } else {
        return IOUtils.getCache(CookiesCache, MemoryCache);
      }
    }
  };

  module.exports.TrackingUtils = TrackingUtils;

  TransferUtils = {
    "ajaxHeader": function(apiKey) {
      var callback;
      return callback = function(request) {
        return request.setRequestHeader("x-api-key", apiKey);
      };
    },
    "encodeObject": function(src, valueLengthLimit) {
      var batch, e, encodedString, encodedStringLength, end, error, finalResult, i, index, item, j, jsonString, k, key, len, numberOfBatch, ref, splitedResult, srcCopy, start, value;
      srcCopy = {};
      for (key in src) {
        if (!hasProp.call(src, key)) continue;
        value = src[key];
        srcCopy[key] = value;
      }
      try {
        jsonString = JSON.stringify(srcCopy);
        encodedString = Base64.encode(jsonString);
      } catch (error) {
        e = error;
        log.error({
          'src': src,
          'error': e
        }, "Cannot convert to base64");
        return {};
      }
      encodedStringLength = encodedString.length;
      numberOfBatch = Math.ceil(encodedStringLength / valueLengthLimit);
      splitedResult = [];
      for (i = j = 0, ref = numberOfBatch - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
        start = i * valueLengthLimit;
        end = (i + 1) * valueLengthLimit;
        if (end > encodedStringLength) {
          end = encodedStringLength;
        }
        end -= 1;
        batch = encodedString.slice(start, +end + 1 || 9e9);
        splitedResult.push(batch);
      }
      finalResult = {};
      for (index = k = 0, len = splitedResult.length; k < len; index = ++k) {
        item = splitedResult[index];
        finalResult["param-" + index] = item;
      }
      return finalResult;
    },
    "objectHash": function(src) {
      var bytes, stringSrc;
      stringSrc = JSON.stringify(src);
      bytes = sjcl.hash.sha256.hash(stringSrc);
      return sjcl.codec.hex.fromBits(bytes);
    }
  };

  ValidateUtils = {
    "variableVerify": function(val) {
      var r;
      if (val != null) {
        val = val.toString();
        r = val.length > 0;
        r = r && (val !== 'Undefined' && val !== 'NaN' && val !== 'Infinity');
        return r;
      } else {
        return false;
      }
    }
  };

  _postAMAEvent = function(event_, callback) {
    // var attributes = {};
    // for(var i in event_.attributes){
    //   attributes[i] = String(event_.attributes[i]);
    // }
    // Analytics.record(
    //   event_.event_type,
    //   attributes
    // );

    var params, trackingID, url;
    if (callback == null) {
      callback = function(err, data) {};
    }
    trackingID = MemoryCache.get("trackingID");
    url = trackingConfig.POST_AMA_EVENT_SERVICE(trackingID);
    params = {
      type: "POST",
      cache: false,
      beforeSend: TransferUtils.ajaxHeader(trackingConfig.POST_API_KEY),
      dataType: "json",
      url: url,
      contentType: "application/json",
      data: JSON.stringify(event_)
    };
    return $.ajax(params).done(function(data) {
      return callback(null, data);
    }).fail(function(jqXHR, textStatus, errorThrown) {
      return callback({
        "jqXHR": jqXHR,
        "textStatus": textStatus,
        "errorThrown": errorThrown
      });
    });
  };

  EventSubmitProtocol = {
    "postAMAEvent": _postAMAEvent
  };

  _resolveClientIPAdress = function() {
    var params, url;
    url = trackingConfig.IP_RESOLVE_SERVICE;
    params = {
      type: "GET",
      beforeSend: TransferUtils.ajaxHeader(trackingConfig.PUBLIC_INFO_API_KEY),
      dataType: "json",
      url: url
    };
    return $.ajax(params).done(function(data) {
      var ip;
      ip = data["client-ip"];
      return TrackingUtils.addDimension(globalDimension.DEVICE_IP, ip);
    });
  };

  myInfoProtocol = {
    "resolveClientIPAdress": _resolveClientIPAdress
  };

  trackingIDLookup = function(trackingID, callback) {
    if (trackingID in trackingConfig.TRACKING_MAP) {
      return callback(null, trackingConfig.TRACKING_MAP[trackingID]);
    } else {
      return callback(new Error(trackingID + " not found"));
    }
  };

  _basicConfigure = function(variables) {
    var key, pageDimensions, screenSize, transferHelper, value;
    transferHelper = new VariablesTransfer(TrackingUtils.getGlobal(), variables);
    transferHelper
      .transfer(globalDimension.APP_SESSION_ID)
      .transfer(globalDimension.PAGE_SESSION)
      .transfer(globalDimension.SCREEN_SESSION_ID)
      .transfer(globalDimension.DEVICE_TYPE)
      .transfer(globalDimension.USER_AGENT)
      .transfer(globalDimension.APP_LANUAGE)
      .transfer(globalDimension.USER_ID)
      .transfer(globalDimension.DEVICE_OS)
      .transfer(globalDimension.LEAD_IN_REFERRER)
      .transfer(globalDimension.TAGGING_VERSION)
      .transfer(globalDimension.DEVICE_ID)
      .transfer(globalDimension.SYSTEM_LANUAGE)
      .transfer(globalDimension.DEVICE_IP)
      .transfer(globalDimension.PAGE_TITLE)
      .transfer(globalDimension.PAGE_FULL_PATH)
      .transfer(globalDimension.UTM_SOURCE)
      .transfer(globalDimension.UTM_CAMPAIGN)
      .transfer(globalDimension.UTM_MEDIUM)
      .transfer(globalDimension.UTM_TERM)
      .transfer(globalDimension.UTM_CONTENT)
      .transfer(globalDimension.MARKETING_AUTOMATION_PLATFORM_DEVICE_ID)
      .transfer(globalDimension.USER_SUBSCRIPTION_SOURCE)
      .transfer(globalDimension.USER_SUBSCRIPTION_PLAN_CODE)
      .transfer(globalDimension.AREA_ID)
      .transfer(globalDimension.USER_LEVEL)
      .transferFromMemCache(globalDimension.HTTP_REFERRER);

    variables.addDimension(globalDimension.EVENT_TIMESTAMP, JSUtils.currentTimestamp());
    variables.addDimension(globalDimension.ACTIVITY_SESSION_ID, AppUtils.getActivitySession());
    screenSize = AppUtils.getScreenSize();
    variables.addDimension(globalDimension.WINDOW_WIDTH, screenSize.width);
    variables.addDimension(globalDimension.WINDOW_HEIGHT, screenSize.height);
    pageDimensions = MemoryCache.get("pageDimensions");
    for (key in pageDimensions) {
      if (!hasProp.call(pageDimensions, key)) continue;
      value = pageDimensions[key];
      variables.addDimension(key, value);
    }
    return variables;
  };

  _flurryConfigure = function(func) {
    return function(variables) {
      return func(variables);
    };
  };

  _gaConfigure = function(func) {
    return function(variables) {
      var key, ref, value;
      variables = func(variables);
      ref = variables.dimensions;
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        if (!isNaN(key)) {
          variables.addDimension("dimension" + key, value);
          delete variables.dimensions[key];
        } else {

        }
      }
      variables.addDimension("title", AppUtils.getTitle());
      variables.addDimension("page", AppUtils.getPageFullPath());
      return variables;
    };
  };

  beforeSubmitConfigure = function(tracker) {
    if (tracker instanceof FlurryAnalyticsAdapter) {
      return _flurryConfigure(_basicConfigure);
    } else if (tracker instanceof GoogleAnalyticsAdapter) {
      return _gaConfigure(_basicConfigure);
    } else {
      return _basicConfigure;
    }
  };

  VariableDecorator = {
    "addDimension": function(func) {
      return function(dimension, value) {
        var valueWithPrefix;
        if ((dimension != null) && (value != null)) {
          value = String(value).trim();
          if (ValidateUtils.variableVerify(value)) {
            valueWithPrefix = TrackingUtils.decorateDimensionWithPrefix(dimension, value);
            return func(dimension, valueWithPrefix);
          } else {

          }
        }
      };
    },
    "getDimension": function(func) {
      return function(dimension) {
        return TrackingUtils.removeDimensionPrefix(dimension);
      };
    }
  };

  VariablesTransfer = (function() {
    function VariablesTransfer(srcVariables, destVariables) {
      this.srcVariables = srcVariables;
      this.destVariables = destVariables;
    }

    VariablesTransfer.prototype.transfer = function(key) {
      var srcValue;
      srcValue = this.srcVariables.getDimension(key);
      this.destVariables.addDimension(key, srcValue);
      return this;
    };

    VariablesTransfer.prototype.transferFromMemCache = function(key) {
      var srcValue;
      srcValue = MemoryCache.get(key);
      this.destVariables.addDimension(key, srcValue);
      return this;
    };

    return VariablesTransfer;

  })();

  TrackingObject = (function() {
    function TrackingObject() {
      this.customVariables = new StandardCustomVariables();
      this.interactive = true;
    }

    return TrackingObject;

  })();

  Event = (function(superClass) {
    extend(Event, superClass);

    function Event() {
      Event.__super__.constructor.apply(this, arguments);
      this.category = null;
      this.action = null;
      this.label = null;
      this.value = null;
    }

    return Event;

  })(TrackingObject);

  module.exports.Event = Event;

  PageView = (function(superClass) {
    extend(PageView, superClass);

    function PageView() {
      return PageView.__super__.constructor.apply(this, arguments);
    }

    return PageView;

  })(TrackingObject);

  module.exports.PageView = PageView;

  SocialInteraction = (function(superClass) {
    extend(SocialInteraction, superClass);

    function SocialInteraction() {
      SocialInteraction.__super__.constructor.apply(this, arguments);
      this.socialAction = null;
      this.socialTarget = null;
      this.socialNetwork = null;
    }

    return SocialInteraction;

  })(TrackingObject);

  module.exports.SocialInteraction = SocialInteraction;

  TimingEvent = (function(superClass) {
    extend(TimingEvent, superClass);

    function TimingEvent() {
      TimingEvent.__super__.constructor.apply(this, arguments);
      this.category = null;
      this.name = null;
      this.label = null;
      this.value = null;
    }

    return TimingEvent;

  })(TrackingObject);

  module.exports.TimingEvent = TimingEvent;

  TrackerState = (function(superClass) {
    extend(TrackerState, superClass);

    function TrackerState() {
      this.initTrackers = bind(this.initTrackers, this);
      return TrackerState.__super__.constructor.apply(this, arguments);
    }

    TrackerState.prototype.initTrackers = function(trackingID, params) {
      var gaConfiguration, logLevel, pageDimensions;
      MemoryCache.set("trackingID", trackingID);
      logLevel = JSUtils.getProperty(params, "logLevel", "warn");
      gaConfiguration = JSUtils.getProperty(params, "gaConfiguration", "auto");
      pageDimensions = JSUtils.getProperty(params, "pageDimensions", {});
      trackingConfig.setLogLevel(logLevel);
      MemoryCache.set("pageDimensions", pageDimensions);
      MemoryCache.set("appTitle", JSUtils.getProperty(params, "app_title"));
      MemoryCache.set("appVersionName", JSUtils.getProperty(params, "app_version_name"));
      MemoryCache.set("appVersionCode", JSUtils.getProperty(params, "app_version_code"));
      MemoryCache.set("appPackageName", JSUtils.getProperty(params, "app_package_name"));
      return trackingIDLookup(trackingID, (function(_this) {
        return function(err, data) {
          if (err != null) {
            _this.emit('createTrackerFailure', err);
            return;
          }
          trackingConfig.runningMode = data.STATE;
          _this._initGA(data.GA_PROPERTY_ID, gaConfiguration);
          _this._initAMA(data.COGNITO_IDENTITY_POOL_ID, data.AMA_APP_ID);
          _this._initFlurry(data.FLURRY_APP_KEY);
          return _this.emit('createTrackerDone');
        };
      })(this));
    };

    TrackerState.prototype._initGA = function(propertyID, config) {
      // return window.ga('create', propertyID, config);
    };

    TrackerState.prototype._initFlurry = function(flurryKey) {
      return FlurryAgent.startSession(flurryKey);
    };

    TrackerState.prototype._initAMA = function(cognitoID, appID) {
      var maClientOptions, mobileAnalyticsClient;
      window.AWS.config.region = 'us-east-1';
      window.AWS.config.credentials = new AWS.CognitoIdentityCredentials({
        "IdentityPoolId": cognitoID
      });
      maClientOptions = {
        "appId": appID
      };
      maClientOptions.appTitle = MemoryCache.get("appTitle");
      maClientOptions.appVersionName = MemoryCache.get("appVersionName");
      maClientOptions.appVersionCode = MemoryCache.get("appVersionCode");
      maClientOptions.appPackageName = MemoryCache.get("appPackageName");
      maClientOptions.platform = "Web";
      maClientOptions.clientId = AppUtils.getDeviceID();
      maClientOptions.autoSubmitInterval = 2000;
      mobileAnalyticsClient = new AMA.Manager(maClientOptions);

      // Auth.configure({
      //   identityPoolId: cognitoID,
      //   region: 'us-east-1'
      // });
      // Analytics.configure({
      //   AWSPinpoint: {
      //     appId: appID,
      //     region: 'us-east-1',
      //     clientContext: {
      //       appTitle: MemoryCache.get("appTitle"),
      //       appVersionName: MemoryCache.get("appVersionName"),
      //       appVersionCode: MemoryCache.get("appVersionCode"),
      //       appPackageName: MemoryCache.get("appPackageName"),
      //       platform: "Web"
      //     }
      //   }
      // });

      return scope.maClient = mobileAnalyticsClient;
    };

    return TrackerState;

  })(window.EventEmitter);

  trackerState = new TrackerState();

  module.exports.initialize = trackerState.initTrackers;

  Tracker = (function() {
    Tracker.renewScreenSessionID = function(cleanUpGlobal) {
      if (cleanUpGlobal == null) {
        cleanUpGlobal = true;
      }
      return TrackingUtils.refreshScreenSession(cleanUpGlobal);
    };

    Tracker.renewActivitySessionID = function() {
      return TrackingUtils.refreshActivitySessionID(false);
    };

    Tracker.renewAppSessionID = function() {
      return TrackingUtils.refreshAppSession();
    };

    function Tracker() {
      this.customConfigure = beforeSubmitConfigure(this);
      this.pageName = AppUtils.getPageFullPath();
      this.title = AppUtils.getTitle();
    }

    Tracker.prototype._configure_parameters = function(params) {
      var paramsCopy;
      paramsCopy = params.clone();
      return this.customConfigure(paramsCopy);
    };

    Tracker.prototype.setUserID = function(userID1) {
      this.userID = userID1;
    };

    Tracker.prototype._pushPage = function(pageView, callback) {
      return scope.log.warn("Using default implement, this do nothing");
    };

    Tracker.prototype._pushEvent = function(event_, callback) {
      return scope.log.warn("Using default implement, this do nothing");
    };

    Tracker.prototype._pushTimingEvent = function(timingEvent, callback) {
      return scope.log.warn("Using default implement, this do nothing");
    };

    Tracker.prototype._pushSocialInteractions = function(socialInteraction, callback) {
      return scope.log.warn("Using default implement, this do nothing");
    };

    Tracker.prototype.pushPage = function(pageView, callback) {
      var orgCustomVariables;
      if (callback == null) {
        callback = JSUtils.defaultCallback;
      }
      orgCustomVariables = pageView.customVariables;
      pageView.customVariables = this._configure_parameters(orgCustomVariables);
      this._pushPage(pageView, callback);
      return pageView.customVariables = orgCustomVariables;
    };

    Tracker.prototype.pushEvent = function(event_, callback) {
      var orgCustomVariables;
      if (callback == null) {
        callback = JSUtils.defaultCallback;
      }
      orgCustomVariables = event_.customVariables;
      event_.customVariables = this._configure_parameters(event_.customVariables);
      this._pushEvent(event_, callback);
      return event_.customVariables = orgCustomVariables;
    };

    Tracker.prototype.pushTimingEvent = function(timingEvent, callback) {
      var orgCustomVariables;
      if (callback == null) {
        callback = JSUtils.defaultCallback;
      }
      orgCustomVariables = timingEvent.customVariables;
      timingEvent.customVariables = this._configure_parameters(timingEvent.customVariables);
      this._pushTimingEvent(timingEvent, callback);
      return timingEvent.customVariables = orgCustomVariables;
    };

    Tracker.prototype.pushSocialInteractions = function(socialInteraction, callback) {
      var orgCustomVariables;
      if (callback == null) {
        callback = JSUtils.defaultCallback;
      }
      orgCustomVariables = socialInteraction.customVariables;
      socialInteraction.customVariables = this._configure_parameters(socialInteraction.customVariables);
      this._pushSocialInteractions(socialInteraction, callback);
      return socialInteraction.customVariables = orgCustomVariables;
    };

    Tracker.prototype.createTimingEvent = function() {

      /*Prepare timing event timer
      
      Args:
          category (str) :timingCategory
          name (str) :timingVar
          label (str, optional) :timingLabel
       */
      return new TimingEvent();
    };

    Tracker.prototype.handshake = function() {
      var handshakeEvent;
      handshakeEvent = new tracking.Event();
      handshakeEvent.category = "System";
      handshakeEvent.action = "handshake";
      return this.pushEvent(handshakeEvent);
    };

    return Tracker;

  })();

  module.exports.Tracker = Tracker;

  AMAAnalyticsAdapter = (function(superClass) {
    extend(AMAAnalyticsAdapter, superClass);

    function AMAAnalyticsAdapter(maClient) {
      this.maClient = maClient;
      AMAAnalyticsAdapter.__super__.constructor.apply(this, arguments);
    }

    AMAAnalyticsAdapter.prototype._parameters_factory = function(eventName) {
      var result;
      result = {};
      result["type"] = eventName;
      if (this.userID != null) {
        result["userID"] = this.userID;
      }
      return result;
    };

    AMAAnalyticsAdapter.prototype._pushAMAEvent = function(attributes, metrics, callback) {
      var appMeta, require_object;
      appMeta = AppUtils.getAppSessionMeta();
      require_object = {
        "app_title": MemoryCache.get("appTitle"),
        "app_version_name": MemoryCache.get("appVersionName"),
        "app_version_code": MemoryCache.get("appVersionCode"),
        "app_package_name": MemoryCache.get("appPackageName"),
        "event_type": this.title,
        "attributes": attributes,
        "app_session_start_time": appMeta.createdTime
      };
      scope.log.debug({
        "screen": this.title,
        "attributes": require_object
      }, "Submit to AMA");
      return EventSubmitProtocol.postAMAEvent(require_object, callback);
    };

    AMAAnalyticsAdapter.prototype._pushPage = function(pageView, callback) {

      /*Send hit to GA
      
      Args:
          options (object, optional) : Check
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#Hit
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#customs
       */
      var params;
      params = this._parameters_factory("screen");
      params = JSUtils.objectMerge(params, pageView.customVariables.dimensions);
      params["interactive"] = false;
      return this._pushAMAEvent(params, pageView.customVariables.metrics, callback);
    };

    AMAAnalyticsAdapter.prototype._pushEvent = function(event_, callback) {

      /*Send event to GA
      
      Args:
          category(str) :Category
          action(str) :Action
          options (object, optional) : key label for event label ,
          value for event value
      
          Other key check
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#event
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#customs
       */
      var params;
      params = this._parameters_factory("customEvent");
      if (event_.category != null) {
        params["category"] = event_.category;
      }
      if (event_.action != null) {
        params["action"] = event_.action;
      }
      if (event_.label != null) {
        params["label"] = event_.label;
      }
      if (event_.value != null) {
        params["value"] = event_.value;
      }
      params = JSUtils.objectMerge(params, event_.customVariables.dimensions);
      params["interactive"] = event_.interactive;
      return this._pushAMAEvent(params, event_.customVariables.metrics, callback);
    };

    AMAAnalyticsAdapter.prototype._pushTimingEvent = function(timingEvent, callback) {

      /*Send user timing to GA
      
      Args:
          timingEvent (TimingEvent) :TimingEvent instance
          return from startTimingEvent
      
          options (object, optional) :Check
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#timing
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#customs
       */
      var params;
      params = this._parameters_factory("timingEvent");
      if (timingEvent.category != null) {
        params["category"] = timingEvent.category;
      }
      if (timingEvent.name != null) {
        params["name"] = timingEvent.name;
      }
      if (timingEvent.label != null) {
        params["label"] = timingEvent.label;
      }
      if (timingEvent.value != null) {
        params["interval"] = timingEvent.value;
      }
      params = JSUtils.objectMerge(params, timingEvent.customVariables.dimensions);
      params["interactive"] = timingEvent.interactive;
      return this._pushAMAEvent(params, timingEvent.customVariables.metrics, callback);
    };

    AMAAnalyticsAdapter.prototype._pushSocialInteractions = function(socialInteraction, callback) {

      /*Send Social Interaction to GA
      
      Args:
          network (str) :socialNetwork
          action (str) :socialAction
          target (str) :socialTarget
          options (object) :Check
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#social
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#customs
       */
      var params;
      params = this._parameters_factory("socialInteraction");
      if (socialInteraction.socialAction != null) {
        params["socialAction"] = socialInteraction.socialAction;
      }
      if (socialInteraction.socialTarget != null) {
        params["socialTarget"] = socialInteraction.socialTarget;
      }
      if (socialInteraction.socialNetwork != null) {
        params["socialNetwork"] = socialInteraction.socialNetwork;
      }
      params = JSUtils.objectMerge(params, socialInteraction.customVariables.dimensions);
      params["interactive"] = socialInteraction.interactive;
      return this._pushAMAEvent(params, socialInteraction.customVariables.metrics, callback);
    };

    return AMAAnalyticsAdapter;

  })(Tracker);

  module.exports.AMAAnalyticsAdapter = AMAAnalyticsAdapter;

  FlurryAnalyticsAdapter = (function(superClass) {
    extend(FlurryAnalyticsAdapter, superClass);

    function FlurryAnalyticsAdapter(flurryTracker) {
      this.flurryTracker = flurryTracker;
      FlurryAnalyticsAdapter.__super__.constructor.apply(this, arguments);
    }

    FlurryAnalyticsAdapter.prototype._pushFlurryEvent = function(params) {
      var eventName;
      eventName = this.title;
      return this.flurryTracker.logEvent(this.eventName, {
        "params": JSON.stringify(params)
      });
    };

    FlurryAnalyticsAdapter.prototype.setUserID = function(userID1) {
      this.userID = userID1;
      if (this.userID != null) {
        return this.flurryTracker.setUserId(this.userID);
      }
    };

    FlurryAnalyticsAdapter.prototype._pushPage = function(pageView) {

      /*Send hit to GA
      
      Args:
          options (object, optional) : Check
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#Hit
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#customs
       */
      var params;
      params = {};
      params = JSUtils.objectMerge(params, pageView.customVariables.dimensions);
      params = JSUtils.objectMerge(params, pageView.customVariables.metrics);
      params["interactive"] = false;
      params["type"] = "screen";
      return this._pushFlurryEvent(params);
    };

    FlurryAnalyticsAdapter.prototype._pushEvent = function(event_) {

      /*Send event to GA
      
      Args:
          category(str) :Category
          action(str) :Action
          options (object, optional) : key label for event label ,
          value for event value
      
          Other key check
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#event
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#customs
       */
      var params;
      params = {};
      if (event_.category != null) {
        params["category"] = event_.category;
      }
      if (event_.action != null) {
        params["action"] = event_.action;
      }
      if (event_.label != null) {
        params["label"] = event_.label;
      }
      if (event_.value != null) {
        params["value"] = event_.value;
      }
      params = JSUtils.objectMerge(params, event_.customVariables.dimensions);
      params = JSUtils.objectMerge(params, event_.customVariables.metrics);
      params["type"] = "customEvent";
      params["interactive"] = event_.interactive;
      return this._pushFlurryEvent(params);
    };

    FlurryAnalyticsAdapter.prototype._pushTimingEvent = function(timingEvent) {

      /*Send user timing to GA
      
      Args:
          timingEvent (TimingEvent) :TimingEvent instance
          return from startTimingEvent
      
          options (object, optional) :Check
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#timing
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#customs
       */
      var params;
      params = {};
      if (timingEvent.category != null) {
        params["category"] = timingEvent.category;
      }
      if (timingEvent.name != null) {
        params["name"] = timingEvent.name;
      }
      if (timingEvent.label != null) {
        params["label"] = timingEvent.label;
      }
      if (timingEvent.value != null) {
        params["interval"] = timingEvent.value;
      }
      params = JSUtils.objectMerge(params, timingEvent.customVariables.dimensions);
      params = JSUtils.objectMerge(params, timingEvent.customVariables.metrics);
      params["type"] = "timingEvent";
      params["interactive"] = timingEvent.interactive;
      return this._pushFlurryEvent(params);
    };

    FlurryAnalyticsAdapter.prototype._pushSocialInteractions = function(socialInteraction) {

      /*Send Social Interaction to GA
      
      Args:
          network (str) :socialNetwork
          action (str) :socialAction
          target (str) :socialTarget
          options (object) :Check
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#social
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#customs
       */
      var params;
      params = {};
      if (socialInteraction.socialAction != null) {
        params["socialAction"] = socialInteraction.socialAction;
      }
      if (socialInteraction.socialTarget != null) {
        params["socialTarget"] = socialInteraction.socialTarget;
      }
      if (socialInteraction.socialNetwork != null) {
        params["socialNetwork"] = socialInteraction.socialNetwork;
      }
      params = JSUtils.objectMerge(params, socialInteraction.customVariables.dimensions);
      params = JSUtils.objectMerge(params, socialInteraction.customVariables.metrics);
      params["type"] = "socialInteraction";
      params["interactive"] = socialInteraction.interactive;
      return this._pushFlurryEvent(params);
    };

    return FlurryAnalyticsAdapter;

  })(Tracker);

  module.exports.FlurryAnalyticsAdapter = FlurryAnalyticsAdapter;

  _gaCallback = function(callback) {
    var called;
    called = false;
    return function() {
      if (!called) {
        called = true;
        callback();
      }
    };
  };

  GoogleAnalyticsAdapter = (function(superClass) {
    extend(GoogleAnalyticsAdapter, superClass);

    function GoogleAnalyticsAdapter(gaTracker) {
      this.gaTracker = gaTracker;
      GoogleAnalyticsAdapter.__super__.constructor.apply(this, arguments);
    }

    GoogleAnalyticsAdapter.prototype._pushPage = function(pageView, callback) {

      /*Send hit to GA
      
      Args:
          options (object, optional) : Check
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#Hit
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#customs
       */
      var params;
      params = {};
      params = JSUtils.objectMerge(params, pageView.customVariables.dimensions);
      params = JSUtils.objectMerge(params, pageView.customVariables.metrics);
      params.hitCallback = _gaCallback(callback);
      return this.gaTracker('send', 'pageview', params);
    };

    GoogleAnalyticsAdapter.prototype._pushEvent = function(event_, callback) {

      /*Send event to GA
      
      Args:
          category(str) :Category
          action(str) :Action
          options (object, optional) : key label for event label ,
          value for event value
      
          Other key check
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#event
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#customs
       */
      var params;
      params = {};
      if (event_.category != null) {
        params["eventCategory"] = event_.category;
      }
      if (event_.action != null) {
        params["eventAction"] = event_.action;
      }
      if (event_.label != null) {
        params["eventLabel"] = event_.label;
      }
      if (event_.value != null) {
        params["eventValue"] = event_.value;
      }
      params = JSUtils.objectMerge(params, event_.customVariables.dimensions);
      params = JSUtils.objectMerge(params, event_.customVariables.metrics);
      params["nonInteraction"] = !event_.interactive;
      params.hitCallback = _gaCallback(callback);
      return this.gaTracker("send", "event", params);
    };

    GoogleAnalyticsAdapter.prototype._pushTimingEvent = function(timingEvent, callback) {

      /*Send user timing to GA
      
      Args:
          timingEvent (TimingEvent) :TimingEvent instance
          return from startTimingEvent
      
          options (object, optional) :Check
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#timing
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#customs
       */
      var params;
      params = {};
      if (timingEvent.category != null) {
        params["timingCategory"] = timingEvent.category;
      }
      if (timingEvent.name != null) {
        params["timingVar"] = timingEvent.name;
      }
      if (timingEvent.label != null) {
        params["timingLabel"] = timingEvent.label;
      }
      if (timingEvent.value != null) {
        params["timingValue"] = timingEvent.value;
      }
      params = JSUtils.objectMerge(params, timingEvent.customVariables.dimensions);
      params = JSUtils.objectMerge(params, timingEvent.customVariables.metrics);
      params["nonInteraction"] = !timingEvent.interactive;
      params.hitCallback = _gaCallback(callback);
      return this.gaTracker("send", "timing", params);
    };

    GoogleAnalyticsAdapter.prototype._pushSocialInteractions = function(socialInteraction, callback) {

      /*Send Social Interaction to GA
      
      Args:
          network (str) :socialNetwork
          action (str) :socialAction
          target (str) :socialTarget
          options (object) :Check
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#social
          https://developers.google.com/analytics/devguides/collection/
          analyticsjs/field-reference#customs
       */
      var params;
      params = {};
      if (socialInteraction.socialAction != null) {
        params["socialAction"] = socialInteraction.socialAction;
      }
      if (socialInteraction.socialTarget != null) {
        params["socialTarget"] = socialInteraction.socialTarget;
      }
      if (socialInteraction.socialNetwork != null) {
        params["socialNetwork"] = socialInteraction.socialNetwork;
      }
      params = JSUtils.objectMerge(params, socialInteraction.customVariables.dimensions);
      params = JSUtils.objectMerge(params, socialInteraction.customVariables.metrics);
      params["nonInteraction"] = !socialInteraction.interactive;
      params.hitCallback = _gaCallback(callback);
      return this.gaTracker("send", "social", params);
    };

    return GoogleAnalyticsAdapter;

  })(Tracker);

  module.exports.GoogleAnalyticsAdapter = GoogleAnalyticsAdapter;

  TrackerCollection = (function(superClass) {
    extend(TrackerCollection, superClass);

    function TrackerCollection(trackers1) {
      this.trackers = trackers1 != null ? trackers1 : [];
      TrackerCollection.__super__.constructor.apply(this, arguments);
    }

    TrackerCollection.prototype.setUserID = function(userID1) {
      var j, len, ref, results, tracker;
      this.userID = userID1;
      ref = this.trackers;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        tracker = ref[j];
        results.push(tracker.setUserID(this.userID));
      }
      return results;
    };

    TrackerCollection.prototype.pushPage = function(pageView, callback) {
      var __pushPage, j, len, ref, tasks, tracker;
      if (callback == null) {
        callback = JSUtils.defaultCallback;
      }
      tasks = [];
      __pushPage = function(tracker) {
        return function(_callback) {
          return tracker.pushPage(pageView, _callback);
        };
      };
      ref = this.trackers;
      for (j = 0, len = ref.length; j < len; j++) {
        tracker = ref[j];
        tasks.push(__pushPage(tracker));
      }
      return async.series(tasks, callback);
    };

    TrackerCollection.prototype.pushEvent = function(event_, callback) {
      var __pushEvent, j, len, ref, tasks, tracker;
      if (callback == null) {
        callback = JSUtils.defaultCallback;
      }
      tasks = [];
      __pushEvent = function(tracker) {
        return function(_callback) {
          return tracker.pushEvent(event_, _callback);
        };
      };
      ref = this.trackers;
      for (j = 0, len = ref.length; j < len; j++) {
        tracker = ref[j];
        tasks.push(__pushEvent(tracker));
      }
      return async.series(tasks, callback);
    };

    TrackerCollection.prototype.createTimingEvent = function() {

      /*Prepare timing event timer
      
      Args:
          category (str) :timingCategory
          name (str) :timingVar
          label (str, optional) :timingLabel
       */
      var j, len, ref, tracker;
      ref = this.trackers;
      for (j = 0, len = ref.length; j < len; j++) {
        tracker = ref[j];
        tracker.createTimingEvent();
      }
      return new TimingEvent();
    };

    TrackerCollection.prototype.pushTimingEvent = function(timingEvent, callback) {
      var __pushTimingEvent, j, len, ref, tasks, tracker;
      if (callback == null) {
        callback = JSUtils.defaultCallback;
      }
      tasks = [];
      __pushTimingEvent = function(tracker) {
        return function(_callback) {
          return tracker.pushTimingEvent(timingEvent, _callback);
        };
      };
      ref = this.trackers;
      for (j = 0, len = ref.length; j < len; j++) {
        tracker = ref[j];
        tasks.push(__pushTimingEvent(tracker));
      }
      return async.series(tasks, callback);
    };

    TrackerCollection.prototype.pushSocialInteractions = function(socialInteraction, callback) {
      var __pushSocialInteractions, j, len, ref, tasks, tracker;
      if (callback == null) {
        callback = JSUtils.defaultCallback;
      }
      tasks = [];
      __pushSocialInteractions = function(tracker) {
        return function(_callback) {
          return tracker.pushSocialInteractions(socialInteraction, _callback);
        };
      };
      ref = this.trackers;
      for (j = 0, len = ref.length; j < len; j++) {
        tracker = ref[j];
        tasks.push(__pushSocialInteractions(tracker));
      }
      return async.series(tasks, callback);
    };

    return TrackerCollection;

  })(Tracker);

  getTracker = function(screenName, userID, trackerClasses) {
    var aws_, flurry, ga, j, len, trackerClass, trackerCollection, trackerInstance, trackers;
    if (trackerClasses == null) {
      trackerClasses = [GoogleAnalyticsAdapter, AMAAnalyticsAdapter];
    }
    trackers = [];
    for (j = 0, len = trackerClasses.length; j < len; j++) {
      trackerClass = trackerClasses[j];
      trackerInstance = null;
      if (trackerClass === GoogleAnalyticsAdapter) {
        // ga = window.ga;
        // trackerInstance = new GoogleAnalyticsAdapter(ga);
      } else if (trackerClass === AMAAnalyticsAdapter) {
        aws_ = scope.maClient;
        trackerInstance = new AMAAnalyticsAdapter(aws_);
      } else if (trackerClass === FlurryAnalyticsAdapter) {
        flurry = window.FlurryAgent;
        trackerInstance = new FlurryAnalyticsAdapter(flurry);
      } else {
        log.error("What this? " + trackerClass);
      }
      if (trackerInstance != null) {
        if (screenName != null) {
          trackerInstance.title = screenName;
        }
        trackers.push(trackerInstance);
      }
    }

    /*
    if trackers.length == 0
        queueTracker = trackerQueue.getInstance()
        trackers.push queueTracker
     */
    trackerCollection = new TrackerCollection(trackers);
    trackerCollection.setUserID(userID);
    return trackerCollection;
  };

  module.exports.getTracker = getTracker;

  GlobalCustomVariables = (function(superClass) {
    extend(GlobalCustomVariables, superClass);

    function GlobalCustomVariables() {
      this.getDimension = bind(this.getDimension, this);
      this.addDimension = bind(this.addDimension, this);
      GlobalCustomVariables.__super__.constructor.apply(this, arguments);
      this.notifyListener = false;
      this.dimensions = {};
      this.metrics = {};
      this._restoreFromCache();
      this.notifyListener = true;
    }

    GlobalCustomVariables.prototype._restoreFromCache = function() {
      var _dimension, cache, gDimensions, j, key, len, results, value;
      gDimensions = (function() {
        var results;
        results = [];
        for (key in globalDimension) {
          if (!hasProp.call(globalDimension, key)) continue;
          value = globalDimension[key];
          results.push(value);
        }
        return results;
      })();
      cache = IOUtils.getCache(AppCache, CookiesCache, MemoryCache);
      results = [];
      for (j = 0, len = gDimensions.length; j < len; j++) {
        _dimension = gDimensions[j];
        if (cache.exist(_dimension)) {
          results.push(this.dimensions[_dimension] = cache.get(_dimension));
        } else {
          results.push(void 0);
        }
      }
      return results;
    };

    GlobalCustomVariables.prototype.clearUp = function(excludedDimensions) {
      var j, key, keyNeedRemove, len, ref, results, value;
      if (excludedDimensions == null) {
        excludedDimensions = [];
      }
      keyNeedRemove = [];
      ref = this.dimensions;
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        if (this._variableNeedPrefix(key)) {
          if (indexOf.call(excludedDimensions, key) < 0) {
            keyNeedRemove.push(key);
          }
        }
      }
      results = [];
      for (j = 0, len = keyNeedRemove.length; j < len; j++) {
        key = keyNeedRemove[j];
        results.push(this.removeDimension(key, false));
      }
      return results;
    };

    GlobalCustomVariables.prototype.backup = function() {
      var backupResult, key, ref, value;
      backupResult = {};
      ref = this.dimensions;
      for (key in ref) {
        if (!hasProp.call(ref, key)) continue;
        value = ref[key];
        if (this._variableNeedPrefix(key)) {
          value = this._removePrefix(key, value, true);
          if (value != null) {
            backupResult[key] = value;
          }
        }
      }
      return backupResult;
    };

    GlobalCustomVariables.prototype.dimensionKeySet = function() {
      var key, value;
      return (function() {
        var ref, results;
        ref = this.dimensions;
        results = [];
        for (key in ref) {
          if (!hasProp.call(ref, key)) continue;
          value = ref[key];
          results.push(key);
        }
        return results;
      }).call(this);
    };

    GlobalCustomVariables.prototype.removeDimension = function(key) {
      var preValue, storage;
      preValue = TrackingUtils.getDimensionWithoutPrefix(key);
      storage = TrackingUtils.getDimensionStorage(key);
      storage["delete"](key);
      delete this.dimensions[key];
      if (this.notifyListener) {
        return this.emit("dimensionChange", key, preValue, null);
      }
    };

    GlobalCustomVariables.prototype.addDimension = function(key, value) {
      var newValue, preValue, storage;
      preValue = TrackingUtils.getDimensionWithoutPrefix(key);
      storage = TrackingUtils.getDimensionStorage(key);
      storage.set(key, value);
      this.dimensions[key] = value;
      newValue = TrackingUtils.getDimensionWithoutPrefix(key);
      if (this.notifyListener) {
        return this.emit("dimensionChange", key, preValue, newValue);
      }
    };

    GlobalCustomVariables.prototype.getDimension = function(key) {
      var storage;
      storage = TrackingUtils.getDimensionStorage(key);
      return storage.get(key);
    };

    return GlobalCustomVariables;

  })(EventEmitter);

  globalVariable = new GlobalCustomVariables();

  globalVariable.addDimension = VariableDecorator.addDimension(globalVariable.addDimension);

  globalVariable.getDimension = VariableDecorator.getDimension(globalVariable.getDimension);

  module.exports.globalVariable = globalVariable;

  StandardCustomVariables = (function() {
    function StandardCustomVariables() {
      this.dimensions = {};
      this.metrics = {};
    }

    StandardCustomVariables.prototype.dimensionKeySet = function() {
      var key, value;
      return (function() {
        var ref, results;
        ref = this.dimensions;
        results = [];
        for (key in ref) {
          if (!hasProp.call(ref, key)) continue;
          value = ref[key];
          results.push(key);
        }
        return results;
      }).call(this);
    };

    StandardCustomVariables.prototype.removeDimension = function(key) {
      return delete this.dimensions[key];
    };

    StandardCustomVariables.prototype.addDimension = function(key, value) {
      if (ValidateUtils.variableVerify(value)) {
        return this.dimensions[key] = value;
      }
    };

    StandardCustomVariables.prototype.getDimension = function(key) {
      return this.dimensions[key];
    };

    StandardCustomVariables.prototype.clone = function() {
      var copyVar;
      copyVar = new StandardCustomVariables();
      copyVar.dimensions = JSUtils.objectClone(this.dimensions);
      copyVar.metrics = JSUtils.objectClone(this.metrics);
      return copyVar;
    };

    return StandardCustomVariables;

  })();

  module.exports.StandardCustomVariables = StandardCustomVariables;

  echoDimensionChagne = function(key, preValue, newValue) {
    if (preValue !== newValue) {
      return scope.log.trace({
        "key": key,
        "preValue": preValue,
        "newValue": newValue
      }, "Dimension change");
    }
  };

  dimensionChange = function(key, preValue, newValue) {
    if (key === globalDimension.ACTIVITY_SESSION_ID) {
      if (preValue !== newValue && typeof preValue !== "undefined") {
//        SystemEventFacade.activitySessionStart(newValue);
        TrackingUtils.removeDimension(globalDimension.LEAD_IN_REFERRER);
        TrackingUtils.removeDimension(globalDimension.UTM_SOURCE);
        TrackingUtils.removeDimension(globalDimension.UTM_CAMPAIGN);
        TrackingUtils.removeDimension(globalDimension.UTM_MEDIUM)
        TrackingUtils.removeDimension(globalDimension.UTM_TERM)
        return TrackingUtils.removeDimension(globalDimension.UTM_CONTENT)
      }
    } else if (key === globalDimension.SCREEN_SESSION_ID) {
      return SystemEventFacade.screenSessionStart(newValue);
    } else if (key === globalDimension.USER_ID) {
      if (preValue !== newValue && (preValue || newValue)) {
        // USER_ID change from `undefined` to `null` every page load
        // and hence `ACTIVITY_SESSION_ID` refresh incorrectly 
        // (preValue || newValue) make sure at least one of the value is valid
        return TrackingUtils.refreshActivitySessionID(false);
      }
    }
  };

  globalVariable.on('dimensionChange', dimensionChange);

  globalVariable.on('dimensionChange', echoDimensionChagne);

  _trackerInit = function() {
    var leadinInfo, pagePath, pageSession, pageTitle;
    pageSession = AppUtils.getPageSession();
    leadinInfo = AppUtils.getLeadinInfo();
    pagePath = AppUtils.getPageFullPath();
    pageTitle = AppUtils.getTitle();
    if (leadinInfo != null) {
      ["utm_source", "utm_campaign", "utm_medium", "utm_term", "utm_content"].forEach(function (utmType, index) {
          if (leadinInfo[utmType] != null) {
            TrackingUtils.addDimension(globalDimension[utmType.toUpperCase()], leadinInfo[utmType]);
          }
      })
    }
    TrackingUtils.addDimension(globalDimension.PAGE_TITLE, pageTitle);
    TrackingUtils.addDimension(globalDimension.PAGE_FULL_PATH, pagePath);
    TrackingUtils.addDimension(globalDimension.DEVICE_TYPE, "Web");
    TrackingUtils.addDimension(globalDimension.TAGGING_VERSION, trackingConfig.TAG_VERSION);
    TrackingUtils.addDimension(globalDimension.DEVICE_ID, AppUtils.getDeviceID());
    TrackingUtils.addDimension(globalDimension.USER_AGENT, window.navigator.userAgent);
    TrackingUtils.addDimension(globalDimension.SYSTEM_LANUAGE, AppUtils.getSystemLanguage());
    TrackingUtils.addDimension(globalDimension.PAGE_SESSION, pageSession);
    TrackingUtils.addDimension(globalDimension.APP_SESSION_ID, AppUtils.getAppSession());

    var set_area_id = "";
    if (typeof global_area_id !== 'undefined'){
      set_area_id = global_area_id;
    }else if (typeof area_id !== 'undefined'){
      set_area_id = area_id;
    }

    TrackingUtils.addDimension(globalDimension.AREA_ID, set_area_id);

    MemoryCache.set(globalDimension.HTTP_REFERRER, window.document.referrer);
//    return SystemEventFacade.pageSessionStart(pageSession);
  };

  _trackerInitFailure = function() {};

  trackerState.on('createTrackerDone', _trackerInit);

  trackerState.on('createTrackerFailure', _trackerInitFailure);

  setTimeout(function() {
    myInfoProtocol.resolveClientIPAdress();
    return setInterval(myInfoProtocol.resolveClientIPAdress, 1000 * 60 * 30);
  }, 1);

  module.exports.Tracker.globalParamters = globalVariable;

}).call(this);