;
(function () {

    var event = {};

    function createPlayer(selector, config, ready, onLoadCallback) {

        var targetEl = document.querySelector(selector);
        var children = [];
        var isUpdate = $('#viu-player').length === 1;
        var player;

        if (isUpdate) {
            player = updateviuplayer(config)
            .then((returnPlayer) => {
                onLoadCallback(returnPlayer);
                return Promise.resolve(returnPlayer);
            });
        } else {
            if (targetEl.tagName !== "VIDEO") {
                // var parent = targetEl.parentElement;
                // var playerDiv = document.createElement("div");
                // children = Array.prototype.slice.call(targetEl.children);
                // playerDiv.id = "viu-player";
                // parent.replaceChild(playerDiv, targetEl);
                targetEl.id = "viu-player";
            }

            beforeSetup(config);

            player = viuplayer("viu-player", config, ready, onLoadCallback)
            .then((returnPlayer) => Promise.resolve(returnPlayer)); 
            // children.forEach(function (el, index) {
            //     var playerWrapper = player.getVideoElement();
            //     if (playerWrapper) {
            //         var referEl = playerWrapper.querySelector(".vjs-poster");
            //         playerWrapper.insertBefore(el, referEl.nextElementSibling);
            //     }
            // })

            // eventHandler(player);
        }
        return player;
        // return viuplayer("viu-player", config, ready, onLoadCallback)
        // .then((returnPlayer) => Promise.resolve(returnPlayer));
    }

    function handler(player) {

        player = player || bitmovinPlayer;

        return {
            type: "viuplayer",
            play: play,
            pause: pause,
            muted: muted,
            volume: volume,
            duration: duration,
            currentTime: currentTime,
            seek: seek,
            isFullscreen: isFullscreen,
            toggleFullscreen: toggleFullscreen,
            finished: finished,
            disabled: disabled,
            stop: stop,
            destroyAd: destroyAd,
            setResolution: setResolution,
            loadSubtitles: loadSubtitles,
            disableSubtitles: disableSubtitles,
            subscribe: subscribe,
            trigger: trigger
        }

        function play() {
            player.play();
        }

        function pause() {
            player.pause();
        }

        function duration() {
            return details.current_product.time_duration;
        }

        function currentTime() {
            return player ? player.getCurrentTime() : 0;
        }

        function volume(val) {
            return val ? player.setVolume(val) : player.getVolume();
        }

        function muted() {
            return player.muted();
        }

        function seek(time, callback) {
            if (player.seek(time)) {
                callback(null, player);
            }
        }

        function isFullscreen() {
            return player.getViewMode() == "fullscreen";
        }

        function toggleFullscreen() {

            if (player.getViewMode() == "fullscreen") {
                player.setViewMode("inline")
            } else {
                player.setViewMode("fullscreen")
            }

        }

        function finished() {
            return player.hasEnded();
        }

        function disabled() {
            return false;
        }

        function stop() {
            // player.trigger("stop")
            // from flowplayer document, stop function is
            // Pauses playback and seeks to the beginning of the video. In aposter setup the player goes back into poster state.

            // FIXME:
            // if autoplay is true, vieojs may restart video after finish
            // player.autoplay(false);

            // seems not necessary
            // player.currentTime(0)

        }

        function destroyAd() {
            try {
                if (player.ads.inAdBreak()) {
                    // player.ads.snapshot = null;
                    player.ads.reset();
                    player.ima.getAdsManager().destroy();
                    player.ima.controller.onAdBreakEnd();

                }
            } catch (err) {}
        }

        function setResolution(list, startIndex) {
            return player.setResolution(list, startIndex);
        }

        function loadSubtitles() {

        }

        function disableSubtitles() {
            player.trigger("removeSubtitles")
        }

        function subscribe(name, func) {
            event[name] = func;
        }

        function trigger(name, data) {
            event[name](this, data);
        }

    }

    function eventHandler(player) {

        // player.one("ready", function () {
        //     player.trigger("ready_")
        // })

        // player.on("play", function () {
        //     !player.seeking() && player.trigger("resume")
        // })

        // player.on("pause", function () {
        //     !player.seeking() && player.trigger("pause_", player)
        // })

        // player.on("ended", function () {
        //     player.trigger("finish")
        // })

        // player.on("seeked", function () {
        //     player.trigger("seek")
        // })

        // player.on("fullscreenchange", function () {
        //     var eventName = player.isFullscreen() ? "fullscreen" : "fullscreen-exit";
        //     player.trigger(eventName)
        // })

        // throttle function from https://codeburst.io/throttling-and-debouncing-in-javascript-b01cad5c8edf,
        // and use babel transpiler to es5
        // var throttle = function throttle(func, limit) {
        //     var lastFunc = void 0;
        //     var lastRan = void 0;
        //     return function () {
        //         var context = this;
        //         var args = arguments;
        //         if (!lastRan) {
        //             func.apply(context, args);
        //             lastRan = Date.now();
        //         } else {
        //             clearTimeout(lastFunc);
        //             lastFunc = setTimeout(function () {
        //                 if (Date.now() - lastRan >= limit) {
        //                     func.apply(context, args);
        //                     lastRan = Date.now();
        //                 }
        //             }, limit - (Date.now() - lastRan));
        //         }
        //     };
        // };

        // simulate flowplayer `progress` event, and below is its description from flowplayer document
        // When the playhead moves forward. Happens approximately every 250 milliseconds during playback
        // player.on("timechanged", throttle(function () {
        //     if(player.el_){
        //         !player.ended() && player.trigger("progress_", player);
        //     }
        // }, 250))


        player.on(["volumechange", "advolumechange"], function () {
            player.trigger("volume");
        });

        // handle `timelineadjust` event
        // FIXME: Need to test on window7 IE
        ;
        (function () {

            var from = 0;
            var to = 0;
            var seeking = false;
            var default_ = player.tech_.setCurrentTime;

            // `player.tech_.setCurrentTime` will be call by `player.currentTime` when value is assigned
            player.tech_.setCurrentTime = function () {

                if (!seeking) {
                    seeking = true;
                    from = player.currentTime();
                    player.one("seeked", function () {
                        seeking = false
                        to = player.currentTime();
                        player.trigger("timelineadjust", {
                            from: from,
                            to: to
                        })
                    })
                }

                default_.apply(player.tech_, arguments);

            }

        }());

    }

    function beforeSetup(config) {

        // (function () {

        //     var BigPlayButton = videojs.getComponent("BigPlayButton");
        //     var handleClick_ = BigPlayButton.prototype.handleClick;
        //     BigPlayButton.prototype.handleClick = function (evt) {
        //         handleClick_.call(this, evt);
        //         this.player_.trigger("bigPlayButtonClicked")
        //     }

        // }());

        // if (config.resolutions) {
        //     videojs.getComponent("ResolutionButton").prototype.levels = config.resolutions;
        // }

    }

    window.createPlayer = createPlayer;
    window.playerHandler = handler;

})()